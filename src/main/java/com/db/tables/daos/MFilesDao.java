/*
 * This file is generated by jOOQ.
*/
package com.db.tables.daos;


import com.db.tables.MFiles;
import com.db.tables.records.MFilesRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class MFilesDao extends DAOImpl<MFilesRecord, com.db.tables.pojos.MFiles, String> {

    /**
     * Create a new MFilesDao without any configuration
     */
    public MFilesDao() {
        super(MFiles.M_FILES, com.db.tables.pojos.MFiles.class);
    }

    /**
     * Create a new MFilesDao with an attached configuration
     */
    @Autowired
    public MFilesDao(Configuration configuration) {
        super(MFiles.M_FILES, com.db.tables.pojos.MFiles.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(com.db.tables.pojos.MFiles object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.db.tables.pojos.MFiles> fetchById(String... values) {
        return fetch(MFiles.M_FILES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.db.tables.pojos.MFiles fetchOneById(String value) {
        return fetchOne(MFiles.M_FILES.ID, value);
    }

    /**
     * Fetch records that have <code>file_name IN (values)</code>
     */
    public List<com.db.tables.pojos.MFiles> fetchByFileName(String... values) {
        return fetch(MFiles.M_FILES.FILE_NAME, values);
    }

    /**
     * Fetch records that have <code>file_url IN (values)</code>
     */
    public List<com.db.tables.pojos.MFiles> fetchByFileUrl(String... values) {
        return fetch(MFiles.M_FILES.FILE_URL, values);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.db.tables.pojos.MFiles> fetchByUsername(String... values) {
        return fetch(MFiles.M_FILES.USERNAME, values);
    }
}
